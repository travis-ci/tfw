#!/usr/bin/env bash
# vim:expandtab:ts=2:sw=2:
set -o errexit
set -o pipefail

if [[ "${DEBUG}" ]]; then
  set -o xtrace
fi

__TFW_VERSION__='v0.1.0'
declare -A __TFW_ALIASES__
declare -A __TFW_HELP_DOC__

main() {
  for key in "${!__TFW_ALIASES__[@]}"; do
    eval "__run_${key}() { __run_${__TFW_ALIASES__[${key}]} \"\${@}\"; }"
  done

  local command="${1}"
  shift || true
  if "__run_${command:-help}" "${@}"; then
    exit 0
  fi
  __run_help '' 1
}

# <command[,alias,alias]> <docs>
# Define the documentation and optional aliases for a given command.
def() {
  read -r -a dest_aliases <<<"${1//,/ }"
  shift
  local docs="${1}"
  shift || true

  local dest="${dest_aliases[0]}"

  __TFW_HELP_DOC__[${dest}]="${docs}"
  for key in "${dest_aliases[@]:1}"; do
    __TFW_ALIASES__[${key}]="${dest}"
    __TFW_HELP_DOC__[${key}]="${docs}"
  done
}

__error() {
  echo "ERROR: ${*}" >&2
}

def help,h,-h,--help "[topic] [exit-code]

Get more help about a topic, optionally injecting an exit code (mostly used
internally)."
__run_help() {
  local topic="${1}"
  local exit_code="${2:-0}"

  if [[ "${topic}" ]]; then
    if [[ ${__TFW_HELP_DOC__[${topic}]} ]]; then
      echo -n "Usage: tfw ${topic} "
      cat <<<"${__TFW_HELP_DOC__[${topic}]}"
      exit "${exit_code}"
    else
      echo "ERROR: No help available for topic '${topic}'" >&2
    fi
  fi

  cat <<'EOUSAGE'
tfw <command> [${more-stuff(1)}, ${maybe(2)}]

  help, h, -h, --help       - echo this string or get help for another command
  version, v, -v, --version - echo version and exit

Docker image configuration and deployment stuff:

  extract, e
  printenv, p
  writeenv, w

Junk drawer utility stuff:

  d, urldecode

EOUSAGE
  exit "${exit_code}"
}

def version,v,-v,--version "

Print the version and exit 0, and that's about it!"
__run_version() {
  echo "${__TFW_VERSION__}"
  exit 0
}

def urldecode,d "<url-encoded-string> [url-encoded-string, ...]

URL-decode any number of positional argument strings, handling 'quote plus'
encoding as well, e.g.

  tfw urldecode what%2Fthe+what%3F"
__run_urldecode() {
  : "${*//+/ }"
  echo -e "${_//%/\\x}"
}

def printenv,p "<name> [outfile] [-E/--export]

Print the combined configuration for a given thing by name, optionally writing
to a second \${outfile} argument.  If -E/--export is given, then any leading
\"export \" statements will not be stripped.

NOTE: \${ETCDIR} is used as prefix for \${ETCDIR}/default/"
__run_printenv() {
  local name="${1}"
  if [[ ! "${name}" ]]; then
    __error 'Missing positional argument for name'
    __run_help printenv 2
  fi
  shift

  local out="${1}"
  shift || true

  local leave_exports
  for arg in "${@}"; do
    if [[ "${arg}" =~ ^-E|--export$ ]]; then
      leave_exports=1
    fi
  done

  : "${ETCDIR:=/etc}"

  if [[ "${out}" ]]; then
    echo "${out}"
    exec 1>"${out}"
  fi

  for config_file in \
    travis-enterprise \
    "${name}-chef" \
    "${name}" \
    "${name}-cloud-init" \
    "${name}-local"; do
    if [ -f "${ETCDIR}/default/${config_file}" ]; then
      echo "# ${ETCDIR}/default/${config_file}"
      while read -r line; do
        line="${line//\'/}"
        if [[ ! "${leave_exports}" ]]; then
          line="${line##export }"
        fi
        echo "${line//\"/}"
      done <"${ETCDIR}/default/${config_file}"
    fi
  done
}

def writeenv,w "<name> [dest-basename]

Write the combined configuration for a given thing by name to \${RUNDIR}/,
defaulting to \${RUNDIR}/\${name}.env, but optionally to a custom dest basename.

NOTE: \${ETCDIR} is used as prefix for \${ETCDIR}/default/\
NOTE: \${RUNDIR} is used as prefix for \${RUNDIR}/\${name}.env"
__run_writeenv() {
  local dest_basename="${2:-${1}}"
  local dest="${RUNDIR:-/var/tmp/travis-run.d}/${dest_basename}.env"
  mkdir -p "$(dirname "${dest}")"
  __run_printenv "${1}" "${dest}"
}

def extract,e "<name> <image>

Extract systemd service definition and wrapper script, if present, from a given
docker \${image} to system destinations, defaults being:

service definition: \${ETCDIR:-/etc}/systemd/system/\${name}.service
wrapper script:     \${USRSBINDIR:-/usr/sbin}/\${name}-wrapper

NOTE: \${ETCDIR} is used as prefix for \${ETCDIR}/systemd/system\${name}.service
NOTE: \${USRSBINDIR} is used as prefix for \${USRSBINDIR}/\${name}-wrapper"
__run_extract() {
  local name="${1}"
  local image="${2}"

  if [[ ! "${name}" ]]; then
    __error 'Missing positional argument for name'
    __run_help extract 2
  fi

  if [[ ! "${image}" ]]; then
    __error 'Missing positional argument for image'
    __run_help extract 2
  fi

  local service_dest="${ETCDIR:-/etc}/systemd/system/${name}.service"
  local wrapper_dest="${USRSBINDIR:-/usr/sbin}/${name}-wrapper"

  local tmpcontainer
  tmpcontainer="$(docker run -d --rm "${image}" sh -c "sleep 10")"

  if docker cp "${tmpcontainer}:/app/systemd.service" "${service_dest}"; then
    echo "Extracted ${service_dest}"
  else
    echo "WARN: No systemd.service file found for ${name}" >&2
  fi

  if docker cp "${tmpcontainer}:/app/systemd-wrapper" "${wrapper_dest}"; then
    chmod +x "${wrapper_dest}"
    echo "Extracted ${wrapper_dest}"
  else
    echo "WARN: No systemd wrapper executable found for ${name}" >&2
  fi
}

main "${@}"
