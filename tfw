#!/usr/bin/env bash
# vim:expandtab:ts=2:sw=2:
set -o errexit
set -o pipefail

__TFW_VERSION__='v0.1.0'
declare -A __TFW_ALIASES__
declare -A __TFW_HELP_DOC__

main() {
  if [[ "${DEBUG}" ]]; then
    set -o xtrace
  fi

  for key in "${!__TFW_ALIASES__[@]}"; do
    eval "__run_${key}() { __run_${__TFW_ALIASES__[${key}]} \"\${@}\"; }"
  done

  local command="${1}"
  shift || true
  if "__run_${command}" "${@}"; then
    exit 0
  fi
  __run_help '' 1
}

aka() {
  local dest="${1}"
  shift || true
  for key in "${@}"; do
    __TFW_ALIASES__[${key}]="${dest}"
  done
}

doc() {
  local topic="${1}"
  shift || true
  __TFW_HELP_DOC__[${topic}]="$*"
}

__die() {
  echo "${*}" >&2
  exit 2
}

aka help h -h --help
__run_help() {
  local topic="${1}"
  local exit_code="${2:-0}"

  if [[ "${__TFW_HELP_DOC__[${topic}]}" ]]; then
    cat <<<"${__TFW_HELP_DOC__[${topic}]}"
    exit "${exit_code}"
  else
    echo "ERROR: No help available for topic '${topic}'" >&2
  fi

  cat <<'EOUSAGE'
Usage: tfw <command> [${more-stuff(1)}, ${maybe(2)}]

  h, help    - echo this string and exit or get help for another command
  v, version - echo version and exit

Docker image configuration and deployment stuff:

  e, extract   - extract ${name(1)} systemd files from ${image(2)}
  p, printenv  - print env vars for ${name(1)} to ${out:-STDOUT(2)}
  w, writeenv  - write env vars for ${name(1)} to ${RUNDIR}/ with a basename
                 of ${name(1)}.env or ${custom_name(2)}.env if given

Junk drawer utility stuff:

  d, urldecode - print URL-decoded/unescaped ${strings(*)}

EOUSAGE
  exit "${exit_code}"
}

aka version v -v --version
__run_version() {
  echo "${__TFW_VERSION__}"
  exit 0
}

aka urldecode d
doc urldecode \
"Usage: tfw urldecode <url-encoded-string> [url-encoded-string, ...]

URL-decode any number of positional argument strings, handling 'quote plus'
encoding as well, e.g.

  tfw urldecode what%2Fthe+what%3F
"
__run_urldecode() {
  : "${*//+/ }"
  echo -e "${_//%/\\x}"
}

aka printenv p
__run_printenv() {
  local name="${1}"
  if [[ ! "${name}" ]]; then
    __die 'Missing positional argument for name'
  fi

  local out="${2}"

  : "${ETCDIR:=/etc}"

  if [[ "${out}" ]]; then
    echo "${out}"
    exec 1>"${out}"
  fi

  for config_file in \
    travis-enterprise \
    "${name}-chef" \
    "${name}" \
    "${name}-cloud-init" \
    "${name}-local"; do
    if [ -f "${ETCDIR}/default/${config_file}" ]; then
      echo "# ${ETCDIR}/default/${config_file}"
      while read -r line; do
        line="${line//\'/}"
        echo "${line//\"/}"
      done <"${ETCDIR}/default/${config_file}"
    fi
  done
}

aka writeenv w
__run_writeenv() {
  local dest_basename="${2:-${1}}"
  local dest="${RUNDIR:-/var/tmp/travis-run.d}/${dest_basename}.env"
  mkdir -p "$(dirname "${dest}")"
  __run_printenv "${1}" "${dest}"
}

aka extract e
__run_extract() {
  local name="${1}"
  local image="${2}"

  if [[ ! "${name}" ]]; then
    __die 'Missing positional argument for name'
  fi

  if [[ ! "${image}" ]]; then
    __die 'Missing positional argument for image'
  fi

  local extract_dir="${RUNDIR:-/var/tmp/travis-run.d}/${name}-extract.d"
  local service_dest="${ETCDIR:-/etc}/systemd/system/${name}.service"
  local wrapper_dest="${USRSBINDIR:-/usr/sbin}/${name}-wrapper"

  mkdir -p "${extract_dir}"

  local tmpcontainer
  tmpcontainer="$(docker run -d --rm "${image}" sh -c "sleep 10")"

  if docker cp "${tmpcontainer}:/app/systemd.service" "${service_dest}"; then
    echo "Extracted ${service_dest}"
  else
    echo "WARN: No systemd.service file found for ${name}" >&2
  fi

  if docker cp "${tmpcontainer}:/app/systemd-wrapper" "${wrapper_dest}"; then
    chmod +x "${wrapper_dest}"
    echo "Extracted ${wrapper_dest}"
  else
    echo "WARN: No systemd wrapper executable found for ${name}" >&2
  fi
}

main "${@}"
